{"version":3,"sources":["components/Home.js","components/Posts.js","components/Post.js","components/Demo.js","components/NavItem.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","React","Component","Posts","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","fetch","then","res","json","data","setState","listview","map","item","key","id","title","body","Post","heading","content","handleChange","bind","assertThisInitialized","save","e","defineProperty","target","name","value","preventDefault","method","headers","content-type","JSON","stringify","console","log","onSubmit","type","onChange","Demo","components_Post","components_Posts","NavItem","window","location","pathname","className","href","label","Navigation","NavItem_NavItem","App","Navigation_Navigation","react_router_dom_min","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6962b277.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>What is the scope and objective of this base template?</h3>\r\n        <p>\r\n          This boilerplate is mean t to be used as a bare minimum setup with the minimal necessary components. This is not built with any architecture / dir structure recommendations\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nclass Posts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: []\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(data => this.setState({items: data}));\r\n    }\r\n    render() {\r\n        const listview = this.state.items.map(item => (\r\n            <div key={item.id}>\r\n                <h4>{item.title}</h4>\r\n                <p>{item.body}</p>\r\n            </div>\r\n        ))\r\n        return (\r\n            <div>\r\n                <h1>List</h1>\r\n                {listview}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Posts;","import React, { Component } from 'react';\r\n\r\nclass Post extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            heading: '',\r\n            content: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.save = this.save.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    save(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/posts', {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                heading: this.state.heading,\r\n                content: this.state.content\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => console.log(data));\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Add Item</h1>\r\n                <form onSubmit={this.save}>\r\n                    <div>\r\n                        <label>Heading</label> <br />\r\n                        <input type=\"text\" name=\"heading\" onChange={this.handleChange} value={this.state.heading} />\r\n                    </div>\r\n                    <div>\r\n                        <label>Content</label> <br />\r\n                        <textarea name=\"content\" onChange={this.handleChange} value={this.state.content} />\r\n                    </div>\r\n                    <br />\r\n                    <button type=\"submit\">Add</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post';\r\nimport Posts from './Posts';\r\n\r\nexport default class Demo extends React.Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n            <Post />\r\n            <Posts />\r\n        </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './Navigation.css';\r\n\r\nexport default class NavItem extends Component {\r\n    render() {\r\n        return (\r\n            <li>\r\n                {window.location.pathname === this.props.pathname && <a className=\"selected\" href={'#' + this.props.pathname}>{this.props.label}</a>}\r\n                {window.location.pathname !== this.props.pathname && <a href={'#' + this.props.pathname}>{this.props.label}</a>}\r\n            </li>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Navigation.css';\r\nimport NavItem from './NavItem';\r\n\r\nexport default class Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <div className=\"navmenu\">\r\n                    <ul>\r\n                        <NavItem pathname=\"home\" label=\"Home\"/>\r\n                        <NavItem pathname=\"demo\" label=\"Demo\"/>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"logo\">IOAK Template</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport Home from './components/Home';\r\nimport Posts from './components/Posts';\r\nimport Post from './components/Post';\r\nimport Demo from './components/Demo';\r\nimport { HashRouter } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport Navigation from './components/Navigation';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navigation />\r\n        <HashRouter>\r\n          <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route path=\"/home\" component={Home} />\r\n              <Route path=\"/posts\" component={Posts} />\r\n              <Route path=\"/addpost\" component={Post} />\r\n              <Route path=\"/demo\" component={Demo} />\r\n          </Switch>\r\n        </HashRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}